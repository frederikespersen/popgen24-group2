
R version 3.4.3 (2017-11-30) -- "Kite-Eating Tree"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Loading PLINK genotype data
> library(snpMatrix)
Loading required package: survival
> data <- read.plink("AF.imputed.thin")
Number of SNPs:  816284 
1:216263 1:217847 1:217890 1:217921 1:220099 1:222107  ...
Number of samples:  47 
Canada_101 ArcFoxSamp_103 ArcFoxSamp_104 ArcFoxSamp_105 Canada_109 ArcFoxSamp_110 ...
> geno <- matrix(as.integer(data@.Data),nrow=nrow(data@.Data))
> geno[geno==0] <- NA
> geno <- geno-1
> # keep only SNPs without missing data
> geno <- geno[,complete.cases(t(geno))]
> 
> # Loading clustering definitions
> clusters <- read.csv("clusters.csv", header=1, row.names=1)
> 
> WC84<-function(x,pop){
+   # function to estimate Fst using Weir and Cockerham estimator.
+   # x is NxM genotype matrix, pop is N length vector with population assignment for each sample
+   # returns list with fst between population per M snps (theta) and other variables
+   start.time = Sys.time()
+   ###number ind in each population
+   n<-table(pop)
+   ###number of populations
+   npop<-nrow(n)
+   ###average sample size of each population
+   n_avg<-mean(n)
+   ###total number of samples
+   N<-length(pop)
+   ###frequency in samples
+   p<-apply(x,2,function(x,pop){tapply(x,pop,mean)/2},pop=pop)
+   ###average frequency in all samples (apply(x,2,mean)/2)
+   p_avg<-as.vector(n%*%p/N )
+   ###the sample variance of allele 1 over populations
+   s2<-1/(npop-1)*(apply(p,1,function(x){((x-p_avg)^2)})%*%n)/n_avg
+   ###average heterozygotes
+   # h<-apply(x==1,2,function(x,pop)tapply(x,pop,mean),pop=pop)
+   #average heterozygote frequency for allele 1
+   # h_avg<-as.vector(n%*%h/N)
+   ###faster version than above:
+   h_avg<-apply(x==1,2,sum)/N
+   ###nc (see page 1360 in wier and cockerhamm, 1984)
+   n_c<-1/(npop-1)*(N-sum(n^2)/N)
+   ###variance between populations
+   a <-n_avg/n_c*(s2-(p_avg*(1-p_avg)-(npop-1)*s2/npop-h_avg/4)/(n_avg-1))
+   ###variance between individuals within populations
+   b <- n_avg/(n_avg-1)*(p_avg*(1-p_avg)-(npop-1)*s2/npop-(2*n_avg-1)*h_avg/(4*n_avg))
+   ###variance within individuals
+   c <- h_avg/2
+   ###inbreeding (F_it)
+   F <- 1-c/(a+b+c)
+   ###(F_st)
+   theta <- a/(a+b+c)
+   ###(F_is)
+   f <- 1-c(b+c)
+   ###weighted average of theta
+   theta_w<-sum(a)/sum(a+b+c)
+   print(theta_w)
+   print(unique(pop))
+   return(theta_w)
+ }
> 
> # Initialising dataframe for storage
> df <- data.frame(C=character(), pair=character(), Fst=numeric())
> 
> # Comparing clusters by Fst
> for (C in names(clusters)[-1]) {
+   print(C)
+   C_clusters <- clusters[[C]]
+   cluster_pairs <- t(combn(unique(C_clusters), 2))
+   Fsts <- apply(cluster_pairs, 1, function(pair) WC84(geno[C_clusters %in% pair,], C_clusters[C_clusters %in% pair]))
+   df <- rbind(df,
+               data.frame(
+                 C=C,
+                 pair=apply(cluster_pairs, 1, paste, collapse=" "),
+                 Fst=Fsts))
+   write.csv(df, "fsts.csv")              
+ }
[1] "K"
[1] 0.09952074
[1] 2 6
[1] 0.05507678
[1] 2 3
[1] 0.01665216
[1] 2 4
[1] 0.07791657
[1] 2 5
[1] 0.01952039
[1] 2 1
[1] 0.1566007
[1] 6 3
[1] 0.1008729
[1] 6 4
[1] 0.03412539
[1] 6 5
[1] 0.1344068
[1] 6 1
[1] 0.06873773
[1] 3 4
[1] 0.1355486
[1] 3 5
[1] 0.07813284
[1] 3 1
[1] 0.07775828
[1] 4 5
[1] 0.03751023
[1] 4 1
[1] 0.1077562
[1] 5 1
[1] "K12"
[1] 0.09947258
[1] 12  6
[1] 0.05468201
[1] 12  3
[1] 0.01777447
[1] 12  4
[1] 0.07863342
[1] 12  5
[1] 0.1566007
[1] 6 3
[1] 0.1008729
[1] 6 4
[1] 0.03412539
[1] 6 5
[1] 0.06873773
[1] 3 4
[1] 0.1355486
[1] 3 5
[1] 0.07775828
[1] 4 5
[1] "K24"
[1] 0.09183842
[1] 24  6
[1] 0.05463872
[1] 24  3
[1] 0.07119122
[1] 24  5
[1] 0.02121255
[1] 24  1
[1] 0.1566007
[1] 6 3
[1] 0.03412539
[1] 6 5
[1] 0.1344068
[1] 6 1
[1] 0.1355486
[1] 3 5
[1] 0.07813284
[1] 3 1
[1] 0.1077562
[1] 5 1
[1] "K56"
[1] 0.08694784
[1]  2 56
[1] 0.05507678
[1] 2 3
[1] 0.01665216
[1] 2 4
[1] 0.01952039
[1] 2 1
[1] 0.1407176
[1] 56  3
[1] 0.08685636
[1] 56  4
[1] 0.1151482
[1] 56  1
[1] 0.06873773
[1] 3 4
[1] 0.07813284
[1] 3 1
[1] 0.03751023
[1] 4 1
> 
> proc.time()
    user   system  elapsed 
4063.019   12.925 4092.258 
